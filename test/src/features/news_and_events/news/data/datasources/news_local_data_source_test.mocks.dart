// Mocks generated by Mockito 5.4.4 from annotations
// in capoeirasport_project/test/src/features/news_and_events/news/data/datasources/news_local_data_source_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:capoeirasport_project/core/utils/hive_service.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [HiveService].
///
/// See the documentation for Mockito's code generation for more information.
class MockHiveService extends _i1.Mock implements _i2.HiveService {
  MockHiveService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<T>? getAllThings<T>({required _i2.BoxType? boxType}) =>
      (super.noSuchMethod(Invocation.method(
        #getAllThings,
        [],
        {#boxType: boxType},
      )) as List<T>?);

  @override
  T getThing<T>({
    required _i2.BoxType? boxType,
    required int? key,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getThing,
          [],
          {
            #boxType: boxType,
            #key: key,
          },
        ),
        returnValue: _i3.dummyValue<T>(
          this,
          Invocation.method(
            #getThing,
            [],
            {
              #boxType: boxType,
              #key: key,
            },
          ),
        ),
      ) as T);

  @override
  _i4.Future<void> saveThings<T>({
    required _i2.BoxType? boxType,
    required List<T>? value,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveThings,
          [],
          {
            #boxType: boxType,
            #value: value,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> saveThing<T>({
    required _i2.BoxType? boxType,
    required Object? key,
    required T? value,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveThing,
          [],
          {
            #boxType: boxType,
            #key: key,
            #value: value,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteThing<T>({
    required _i2.BoxType? boxType,
    required Object? key,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteThing,
          [],
          {
            #boxType: boxType,
            #key: key,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
